"""Figma output formatter module.

This module handles formatting layout data into Figma-compatible formats.
"""

import json
from typing import Any, Dict, List, Optional


class FigmaFormatter:
    """Formats layout data into Figma-compatible structures."""

    @staticmethod
    def format_layout(layout_data: Dict[str, Any]) -> Dict[str, Any]:
        """Format layout data into a Figma-compatible structure.

        Args:
            layout_data: Layout data generated by the agent

        Returns:
            Figma-compatible layout structure
        """
        # Ensure the layout has the required top-level properties
        formatted_layout = {
            "name": layout_data.get("name", "Generated Layout"),
            "type": layout_data.get("type", "FRAME"),
            "width": layout_data.get("width", 1440),
            "height": layout_data.get("height", 900),
            "backgroundColor": layout_data.get("backgroundColor", "#FFFFFF"),
            "children": []
        }

        # Process children if present
        if "children" in layout_data and isinstance(layout_data["children"], list):
            formatted_layout["children"] = [
                FigmaFormatter._format_component(child)
                for child in layout_data["children"]
            ]

        return formatted_layout

    @staticmethod
    def _format_component(component: Dict[str, Any]) -> Dict[str, Any]:
        """Format a single component in the layout.

        Args:
            component: Component data

        Returns:
            Figma-compatible component structure
        """
        # Ensure the component has required properties
        formatted_component = {
            "name": component.get("name", "Component"),
            "type": component.get("type", "RECTANGLE"),
            "x": component.get("x", 0),
            "y": component.get("y", 0),
            "width": component.get("width", 100),
            "height": component.get("height", 100),
            "backgroundColor": component.get("backgroundColor", "#FFFFFF"),
        }

        # Copy any additional properties
        for key, value in component.items():
            if key not in formatted_component:
                formatted_component[key] = value

        # Process children recursively
        if "children" in component and isinstance(component["children"], list):
            formatted_component["children"] = [
                FigmaFormatter._format_component(child)
                for child in component["children"]
            ]

        return formatted_component

    @staticmethod
    def to_figma_plugin_format(layout_data: Dict[str, Any]) -> Dict[str, Any]:
        """Convert layout data to Figma Plugin API format.

        Args:
            layout_data: Layout data generated by the agent

        Returns:
            Layout data formatted for the Figma Plugin API
        """
        # This would implement a conversion to the specific format
        # expected by the Figma Plugin API, which is beyond the scope
        # of this basic implementation

        # For now, we'll return a placeholder structure
        formatted_layout = FigmaFormatter.format_layout(layout_data)

        return {
            "name": formatted_layout["name"],
            "type": "DOCUMENT",
            "children": [
                {
                    "name": "Page 1",
                    "type": "PAGE",
                    "children": [
                        formatted_layout
                    ]
                }
            ]
        }


# Create a global instance of the formatter
figma_formatter = FigmaFormatter()
